_ = require 'underscore'
require 'should'
{fix} = require '../lib/coffee2closure'
{transform} = require '../lib/coffee2closure'
{traverse} = require '../lib/coffee2closure'

removeLeadingSpaces = (str) -> str.replace /^\s+/mg, ''
removeNewLines = (str) -> str.replace /\n/g, ''
removeInsigWhitespace = (str) -> removeNewLines removeLeadingSpaces str

describe 'coffee2closure', ->
  describe 'traverse', ->
    syntax =
      'type': 'Program'
      'body': [
        'type': 'VariableDeclaration'
        'declarations': [
          'type': 'VariableDeclarator'
          'id':
            'type': 'Identifier'
            'name': '__hasProp'
        ]
      ]
      'range': [0, 372]
      'comments': [
        'type': 'Line'
        'value': ' some comment'
        'range': [327, 342]
      ]
      'tokens': [
        'type': 'Keyword'
        'value': 'var'
        'range': [0, 3]
      ]

    it 'should traverse ast syntax', ->
      nodes = []
      traverse [syntax], (node) ->
        nodes.push node.type
      nodes[0].should.equal 'Program'
      nodes[1].should.equal 'VariableDeclaration'
      nodes[2].should.equal 'VariableDeclarator'
      nodes[3].should.equal 'Identifier'
      nodes[4].should.equal 'Line'
      nodes[5].should.equal 'Keyword'
      nodes.should.have.length 6

    it 'should stop iteration if visitor returns false after first step', ->
      nodes = []
      traverse [syntax], (node) ->
        nodes.push node.type
        return false
      nodes[0].should.equal 'Program'
      nodes.should.have.length 1

    it 'should stop iteration if visitor returns false', ->
      nodes = []
      traverse [syntax], (node) ->
        nodes.push node.type
        return false if node.type == 'VariableDeclaration'
      nodes[0].should.equal 'Program'
      nodes[1].should.equal 'VariableDeclaration'
      nodes.should.have.length 2

  describe 'nodejs', ->
    it 'should do nothing now', ->
      source = """
        var a = 43;
        exports = a;
      """
      fixedSource = """
        var a = 43;
        exports = a;
      """
      fix(source).should.equal fixedSource

  describe 'fix', ->
    it 'should add generated by header', ->
      source = """
        var a = 43;
      """
      fixedSource = """
        // Generated by github.com/steida/coffee2closure 0.0.14
        var a = 43;
      """
      fix(source).should.equal fixedSource

    it 'should preserve new lines', ->
      source = """
        var a = 43;
        var b = -123;
      """
      fixedSource = """
        // Generated by github.com/steida/coffee2closure 0.0.14
        var a = 43;
        var b = -123;
      """
      fix(source).should.equal fixedSource

    it 'should not add generated by header', ->
      source = """
        var a = 43;
      """
      fixedSource = """
        var a = 43;
      """
      fix(source, addGenerateByHeader: false).should.equal fixedSource

    it 'should preserve block comment newlined', ->
      source = """
        /** fok */
        var a = 5;
      """
      fixedSource = """
        // Generated by github.com/steida/coffee2closure 0.0.14
        /** fok */
        var a = 5;
      """
      fix(source).should.equal fixedSource

    it 'should preserve line comment', ->
      source = """
        // fok
        var a = 5;
      """
      fixedSource = """
        // Generated by github.com/steida/coffee2closure 0.0.14
        // fok
        var a = 5;
      """
      fix(source).should.equal fixedSource

    it 'should preserve indentation', ->
      source = """
        app.start = function(data) {
          var employee;
          return employee = new app.Employee('Joe');
        };
      """
      fixedSource = """
        // Generated by github.com/steida/coffee2closure 0.0.14
        app.start = function(data) {
          var employee;
          return employee = new app.Employee('Joe');
        };
        """
      fix(source).should.equal fixedSource

    describe 'coffee injected code', ->
      it 'should remove __hasProp with __extends', ->
        source = """
          var __hasProp = {}.hasOwnProperty,
            __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

          goog.provide('app.Employee');
        """
        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          goog.provide('app.Employee');
        """
        fix(source).should.equal fixedSource

      it 'should remove __slice', ->
        source = """
          var __slice = doesNotMatterWhatIsHereBecause__AreReservedKeywords;

          goog.provide('app.Employee');
        """
        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          goog.provide('app.Employee');
        """
        fix(source).should.equal fixedSource

      it 'should remove __bind', ->
        source = """
          var __bind = 123;

          goog.provide('app.Employee');
        """
        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          goog.provide('app.Employee');
        """
        fix(source).should.equal fixedSource

      it 'should remove __indexOf', ->
        source = """
          var __indexOf = function() {};

          goog.provide('app.Employee');
        """
        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          goog.provide('app.Employee');
        """
        fix(source).should.equal fixedSource

    describe '__bind', ->
      it 'should be rewritten to goog.bind', ->
        source = """
          var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
            __hasProp = {}.hasOwnProperty,
            __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

          __bind(function() {}, this);
        """
        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          goog.bind(function() {}, this);
        """
        fix(source).should.equal fixedSource

    describe '__indexOf', ->
      it 'should be rewritten to goog.array.indexOf', ->
        source = """
          __indexOf.call([], 1);
        """
        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          goog.require('goog.array');
          goog.array.indexOf([], 1);
        """
        fix(source).should.equal fixedSource

    describe '__slice', ->
      it 'should be rewritten to goog.array.slice', ->
        source = """
          __slice.call(arguments, 1);
        """
        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          goog.require('goog.array');
          goog.array.slice(arguments, 1);
        """
        fix(source).should.equal fixedSource

    describe '__super__', ->
      it 'should be rewritten to superClass_', ->
        source = """
          Employee.__super__.constructor.call(this, name);
        """
        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          Employee.superClass_.constructor.call(this, name);
        """
        fix(source).should.equal fixedSource

    describe 'base class', ->
      it 'should be compiled ok without namespace', ->
        source = """
          /**
            @fileoverview
          */

          var Person;

          goog.provide('Person');

          Person = (function() {

            /**
              @param {string} name
              @constructor
            */

            function Person(name) {
              this.name = name;
              this.alertName();
            }

            /**
              @enum {string}
            */


            Person.EventType = {
              FOO: 'foo'
            };

            /**
              @type {string}
              @protected
            */


            Person.prototype.name = '';

            /**
              @protected
            */


            Person.prototype.alertName = function() {
              return alert(this.name + Person.EventType.FOO);
            };

            return Person;

          })();
        """

        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          /**
            @fileoverview
          */
          goog.provide('Person');

          /**
            @param {string} name
            @constructor
          */
          var Person = function(name) {
            this.name = name;
            this.alertName();
          }

          /**
            @enum {string}
          */
          Person.EventType = {
            FOO: 'foo'
          };

          /**
            @type {string}
            @protected
          */
          Person.prototype.name = '';

          /**
            @protected
          */
          Person.prototype.alertName = function() {
            return alert(this.name + Person.EventType.FOO);
          };
        """
        # # check for invisible whitespaces
        # console.log fix(source)
        # a = fix(source).replace(/\s/g, '_')
        # b = fixedSource.replace(/\s/g, '_')
        # a.should.equal b
        fix(source).should.equal fixedSource

      it 'should be compiled ok without namespace and comments', ->
        source = """
          var Person;

          goog.provide('Person');

          Person = (function() {

            function Person(name) {
              this.name = name;
              this.alertName();
            }

            Person.EventType = {
              FOO: 'foo'
            };

            Person.prototype.name = '';

            Person.prototype.alertName = function() {
              return alert(this.name + Person.EventType.FOO);
            };

            return Person;

          })();
        """

        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          goog.provide('Person');
          var Person = function(name) {
            this.name = name;
            this.alertName();
          }
          Person.EventType = {
            FOO: 'foo'
          };
          Person.prototype.name = '';
          Person.prototype.alertName = function() {
            return alert(this.name + Person.EventType.FOO);
          };
        """
        fix(source).should.equal fixedSource

      it 'should be compiled ok with namespace', ->
        source = """
          /**
            @fileoverview
          */
          goog.provide('app.Person');

          app.Person = (function() {
            /**
              @param {string} name
              @constructor
            */

            function Person(name) {
              this.name = name;
              this.alertName();
            }

            /**
              @enum {string}
            */


            Person.EventType = {
              FOO: 'foo'
            };

            /**
              @type {string}
              @protected
            */


            Person.prototype.name = '';

            /**
              @protected
            */


            Person.prototype.alertName = function() {
              return alert(this.name + Person.EventType.FOO);
            };

            return Person;

          })();
        """

        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          /**
            @fileoverview
          */
          goog.provide('app.Person');

          /**
            @param {string} name
            @constructor
          */
          app.Person = function(name) {
            this.name = name;
            this.alertName();
          }

          /**
            @enum {string}
          */
          app.Person.EventType = {
            FOO: 'foo'
          };

          /**
            @type {string}
            @protected
          */
          app.Person.prototype.name = '';

          /**
            @protected
          */
          app.Person.prototype.alertName = function() {
            return alert(this.name + app.Person.EventType.FOO);
          };
        """
        fix(source).should.equal fixedSource

    describe 'class with constructor wrong placed', ->
      it 'should move constructor to be first', ->
        source = """
          app.Person = (function() {
            /**
              @type {string}
              @protected
            */
            Person.prototype.name = '';

            /**
              @param {string} name
              @constructor
            */
            function Person() {}

            return Person;

          })();
        """

        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          /**
            @param {string} name
            @constructor
          */
          app.Person = function() {}

          /**
            @type {string}
            @protected
          */
          app.Person.prototype.name = '';
        """
        fix(source).should.equal fixedSource

    describe 'two classes in one file', ->
      it 'should work without namespace', ->
        source = """
          var A, B;

          A = (function() {

            function A() {}

            return A;

          })();

          B = (function() {

            function B() {}

            return B;

          })();
        """

        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          var A = function() {}
          var B = function() {}
        """

        fix(source).should.equal fixedSource

      it 'should work with namespace', ->
        source = """
          A.B = (function() {

            function B() {}

            return B;

          })();

          B.B = (function() {

            function B() {}

            return B;

          })();
        """

        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          A.B = function() {}
          B.B = function() {}
        """
        fix(source).should.equal fixedSource

    describe 'class inherited', ->
      it 'should be compiled ok with namespace', ->
        source = """
          var __hasProp = {}.hasOwnProperty,
            __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

          goog.provide('app.Employee');

          goog.require('app.Person');

          app.Employee = (function(_super) {

            __extends(Employee, _super);

            /**
              @param {string} name
              @constructor
              @extends {app.Person}
            */


            function Employee(name) {
              Employee.__super__.constructor.call(this, name);
            }

            return Employee;

          })(app.Person);

        """

        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          goog.provide('app.Employee');
          goog.require('app.Person');

          /**
            @param {string} name
            @constructor
            @extends {app.Person}
          */
          app.Employee = function(name) {
            app.Employee.superClass_.constructor.call(this, name);
          }
          goog.inherits(app.Employee, app.Person);
        """
        fix(source).should.equal fixedSource

      it 'should be compiled ok without namespace', ->
        source = """
          var __hasProp = {}.hasOwnProperty,
            __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

          goog.provide('Employee');

          goog.require('Person');

          Employee = (function(_super) {

            __extends(Employee, _super);

            /**
              @param {string} name
              @constructor
              @extends {Person}
            */


            function Employee(name) {
              Employee.__super__.constructor.call(this, name);
            }

            return Employee;

          })(Person);
        """

        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          goog.provide('Employee');
          goog.require('Person');

          /**
            @param {string} name
            @constructor
            @extends {Person}
          */
          Employee = function(name) {
            Employee.superClass_.constructor.call(this, name);
          }
          goog.inherits(Employee, Person);
          """
        fix(source).should.equal fixedSource

    describe 'special cases', ->
      it 'should full-qualify only identifiers without preceding dot', ->
        source = """
          var __hasProp = {}.hasOwnProperty,
            __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

          este.app.Event = (function(_super) {

            __extends(Event, _super);

            function Event(type, request) {
              this.request = request;
              Event.__super__.constructor.call(this, type);
              foo = new este.model.Event
            }

            return Event;

          })(goog.events.Event);
        """
        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          este.app.Event = function(type, request) {
            this.request = request;
            este.app.Event.superClass_.constructor.call(this, type);
            foo = new este.model.Event
          }
          goog.inherits(este.app.Event, goog.events.Event);
        """
        fix(source).should.equal fixedSource

      # todo, check it without extends
      it 'should handle vars as result of "class metaprogramming possibilities."', ->
        source = """
          este.app.Event = (function(_super) {
            var name, type;

            __extends(Event, _super);

            function Event(type, request) {
              this.request = request;
              Event.__super__.constructor.call(this, type);
            }

            return Event;

          })(goog.events.Event);
        """
        fixedSource = """
          // Generated by github.com/steida/coffee2closure 0.0.14
          este.app.Event = function(type, request) {
            this.request = request;
            este.app.Event.superClass_.constructor.call(this, type);
          }
          var name, type;
          goog.inherits(este.app.Event, goog.events.Event);
        """
        fix(source).should.equal fixedSource

      describe 'coffee injected declarations of length 1 line for namespace-less class', ->
        it 'should move var declaration', ->
          source = """
            var C, f, _class, _ref;

            f = function() {
              return alert('bob');
            };

            C = (function() {
              function C() {
                _ref = _class.apply(this, arguments);
                return _ref;
              }

              _class = f();

              return C;

            })();"""

          fixedSource = """
            // Generated by github.com/steida/coffee2closure 0.0.14
            var  f, _class, _ref;
            f = function() {
              return alert('bob');
            };
            var C = function() {
              _ref = _class.apply(this, arguments);
              return _ref;
            }
            _class = f();"""

          fix(source).should.equal fixedSource

      describe 'coffee-injected declarations of length 1 line for class with namespace', ->
        it 'should not insert var declaration for class', ->
          source = """
            var C, f, _class, _ref;

            f = function() {
              return alert('bob');
            };

            Namespace.C = C = (function() {
              function C() {
                _ref = _class.apply(this, arguments);
                return _ref;
              }

              _class = f();

              return C;

            })();"""

          fixedSource = """
            // Generated by github.com/steida/coffee2closure 0.0.14
            var  f, _class, _ref;
            f = function() {
              return alert('bob');
            };
            Namespace.C = function() {
              _ref = _class.apply(this, arguments);
              return _ref;
            }
            _class = f();"""

          fix(source).should.equal fixedSource

      describe 'coffee injected declarations of length 3 lines', ->
        it 'should not lose required var declarations', ->
          source = """
            (function() {
              var A, B,
                __hasProp = {}.hasOwnProperty,
                __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } /** @constructor */ function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

              A = Library.A, B = Library.B;

              Library.C = function(opts) {
                var C;
                C = (function(_super) {
                  __extends(C, _super);

                  function C(opts) {
                    C.__super__.constructor.call(this, opts);
                    this["class"] = 'C';
                  }

                  return C;

                })(A);
                return new C(opts);
              };

            }).call(this);"""

          fixedSource = """
            // Generated by github.com/steida/coffee2closure 0.0.14
            (function() {
              var A, B;
              A = Library.A, B = Library.B;
              Library.C = function(opts) {
                var C = function(opts) {
                  C.superClass_.constructor.call(this, opts);
                  this["class"] = 'C';
                }
                goog.inherits(C, A);
                return new C(opts);
              };
            }).call(this);"""

          fix(source).should.equal fixedSource

      describe "coffee injected declarations of length 2 lines", ->
        it "should not lose required var declarations", ->
          source = """
            (function() {
              var A, B,
                __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

              A = Library.A;

              Library.B = B = {
                one: '1'
              };}).call(this);"""

          fixedSource = """
            // Generated by github.com/steida/coffee2closure 0.0.14
            (function() {
              var A, B;
              A = Library.A;
              Library.B = B = {
                one: '1'
              };}).call(this);"""

          fix(source).should.equal fixedSource

      describe 'type casting in block comment', ->
        it 'should not inject newline', ->
          source = """
            var A;

            A = (function() {

              function A() {}

              A.prototype.at = function(index) {
                var model;
                model = /** @type {number} */ this.array[index];
                return /** @type {este.Model} */ (model);
              };

              return A;

            })();
          """

          fixedSource = """
            // Generated by github.com/steida/coffee2closure 0.0.14
            var A = function() {}
            A.prototype.at = function(index) {
              var model;
              model = /** @type {number} */ this.array[index];
              return /** @type {este.Model} */ (model);
            };
          """
          fix(source).should.equal fixedSource
